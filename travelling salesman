import itertools

def calculate_cost(path, dist_matrix):
    cost = 0
    for i in range(len(path) - 1):
        cost += dist_matrix[path[i]][path[i + 1]]
    cost += dist_matrix[path[-1]][path[0]]  # Returning to the start point
    return cost

def traveling_salesman(dist_matrix):
    n = len(dist_matrix)
    cities = list(range(n))
    min_cost = float('inf')
    best_path = None

    for path in itertools.permutations(cities):
        cost = calculate_cost(path, dist_matrix)
        if cost < min_cost:
            min_cost = cost
            best_path = path

    print(f"The optimal path is {best_path} with a cost of {min_cost}")

# Example distance matrix
dist_matrix = [
    [0, 10, 15, 20, 25],
    [10, 0, 35, 25, 30],
    [15, 35, 0, 30, 5],
    [20, 25, 30, 0, 15],
    [25, 30, 5, 15, 0]
]

traveling_salesman(dist_matrix)
output
The optimal path is (0, 1, 3, 4, 2) with a cost of 80

