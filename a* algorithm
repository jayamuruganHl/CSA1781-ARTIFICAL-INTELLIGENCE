import heapq

# Node class to represent each state of the search
class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name       # Name of the node (or state)
        self.parent = parent   # Parent node in the path
        self.g = g             # Cost from start to this node
        self.h = h             # Heuristic from this node to goal
        self.f = g + h         # Total cost (g + h)

    def __lt__(self, other):
        # This is used to compare nodes based on f value, so that the heapq priority queue works
        return self.f < other.f


# A* Algorithm to find the shortest path
def a_star(graph, start, goal, heuristic):
    open_list = []  # Priority queue for nodes to be evaluated
    closed_list = set()  # Set for nodes already evaluated

    # Create the start node and add to open list
    start_node = Node(start, None, 0, heuristic[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        # Get the node with the lowest f value
        current_node = heapq.heappop(open_list)

        # If we reached the goal, trace the path
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  # Reverse path to get the correct order

        closed_list.add(current_node.name)

        # Check neighbors of the current node
        for neighbor, weight in graph[current_node.name]:
            if neighbor in closed_list:
                continue

            g_cost = current_node.g + weight
            h_cost = heuristic[neighbor]
            neighbor_node = Node(neighbor, current_node, g_cost, h_cost)

            # If the neighbor is not in the open list, add it
            if all(neighbor_node.f < existing_node.f for existing_node in open_list if existing_node.name == neighbor) or neighbor not in [node.name for node in open_list]:
                heapq.heappush(open_list, neighbor_node)

    return None  # No path found


# Example graph (adjacency list representation with weights)
# Format: graph[start] = [(neighbor, cost), ...]
graph = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('A', 1), ('D', 2)],
    'C': [('A', 3), ('D', 1)],
    'D': [('A', 7), ('B', 2), ('C', 1)]
}

# Example heuristic (straight-line distance from each node to the goal node 'D')
heuristic = {
    'A': 6,
    'B': 4,
    'C': 2,
    'D': 0
}

# Run the A* algorithm
start_node = 'A'
goal_node = 'D'
path = a_star(graph, start_node, goal_node, heuristic)

if path:
    print(f"Path from {start_node} to {goal_node}: {' -> '.join(path)}")
else:
    print("No path found.")

output :

Path from A to D: A -> B -> D

=== Code Execution Successful ===
