from queue import PriorityQueue

goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)

def manhattan_distance(state):
    distance = 0
    for i in range(9):
        if state[i] != 0:
            target_x, target_y = divmod(state[i] - 1, 3)
            current_x, current_y = divmod(i, 3)
            distance += abs(target_x - current_x) + abs(target_y - current_y)
    return distance

def a_star_puzzle(start_state):
    def generate_children(state):
        children = []
        idx = state.index(0)
        row, col = divmod(idx, 3)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_idx = new_row * 3 + new_col
                new_state = list(state)
                new_state[idx], new_state[new_idx] = new_state[new_idx], new_state[idx]
                children.append(tuple(new_state))
        return children
    
    frontier = PriorityQueue()
    frontier.put((0 + manhattan_distance(start_state), 0, start_state, []))
    explored = set()

    while not frontier.empty():
        _, cost, state, path = frontier.get()

        if state == goal_state:
            return path

        if state not in explored:
            explored.add(state)
            for child in generate_children(state):
                if child not in explored:
                    frontier.put((cost + 1 + manhattan_distance(child), cost + 1, child, path + [state]))
    return None

start_state = (5, 1, 2, 0, 4, 3, 7, 8, 6)
solution = a_star_puzzle(start_state)
if solution:
    print("Solution path:")
    for state in solution:
        print(state)
else:
    print("No solution found.")


output 
Solution path:
(5, 1, 2, 0, 4, 3, 7, 8, 6)
(5, 1, 2, 4, 0, 3, 7, 8, 6)
...
(1, 2, 3, 4, 5, 6, 7, 8, 0)
