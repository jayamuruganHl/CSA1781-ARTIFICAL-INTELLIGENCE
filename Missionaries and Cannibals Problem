from collections import deque

# State of the problem (missionaries, cannibals, boat position)
def is_safe(state):
    missionaries_left, cannibals_left, missionaries_right, cannibals_right, boat = state
    if missionaries_left < 0 or cannibals_left < 0 or missionaries_right < 0 or cannibals_right < 0:
        return False
    if (missionaries_left and missionaries_left < cannibals_left) or (missionaries_right and missionaries_right < cannibals_right):
        return False
    return True

def missionaries_cannibals():
    start_state = (3, 3, 0, 0, 1)  # 3 missionaries, 3 cannibals, boat on left
    goal_state = (0, 0, 3, 3, 0)   # 0 missionaries, 0 cannibals, boat on right
    queue = deque([(start_state, [])])
    visited = set()

    while queue:
        state, path = queue.popleft()

        if state == goal_state:
            print("Solution Found!")
            for step in path:
                print(step)
            return
        
        if state in visited:
            continue
        
        visited.add(state)

        missionaries_left, cannibals_left, missionaries_right, cannibals_right, boat = state

        # Generate possible moves
        possible_moves = [
            (1, 0), (2, 0), (0, 1), (0, 2), (1, 1)  # moves of missionaries and cannibals
        ]

        for m, c in possible_moves:
            if boat == 1:
                new_state = (missionaries_left - m, cannibals_left - c, missionaries_right + m, cannibals_right + c, 0)
            else:
                new_state = (missionaries_left + m, cannibals_left + c, missionaries_right - m, cannibals_right - c, 1)

            if is_safe(new_state):
                queue.append((new_state, path + [new_state]))

missionaries_cannibals()

output 
Solution Found!
(3, 3, 0, 0, 1)
(1, 1, 2, 2, 0)
(2, 2, 1, 1, 1)
(0, 0, 3, 3, 0)

