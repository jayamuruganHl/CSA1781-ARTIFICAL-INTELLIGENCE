import math

# Function to check if the game has ended (win, loss, or draw)
def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]
    if all(cell != " " for row in board for cell in row):
        return "draw"
    return None  # No winner yet

# Function to evaluate the board
def evaluate_board(board):
    winner = check_winner(board)
    if winner == "X":
        return 1  # Maximizing player wins
    elif winner == "O":
        return -1  # Minimizing player wins
    return 0  # Draw or ongoing game

# Function to get the available moves (empty spots)
def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

# Minimax function with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing):
    score = evaluate_board(board)
    
    # If the game is over (win/loss/draw)
    if score == 1 or score == -1 or score == 0:
        return score
    
    if is_maximizing:
        best = -math.inf
        # Try all possible moves for the maximizing player ("X")
        for i, j in get_available_moves(board):
            board[i][j] = "X"  # Make the move
            best = max(best, minimax(board, depth + 1, False))
            board[i][j] = " "  # Undo the move
        return best
    else:
        best = math.inf
        # Try all possible moves for the minimizing player ("O")
        for i, j in get_available_moves(board):
            board[i][j] = "O"  # Make the move
            best = min(best, minimax(board, depth + 1, True))
            board[i][j] = " "  # Undo the move
        return best

# Function to find the best move for the current player
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    
    # Try all possible moves and evaluate them
    for i, j in get_available_moves(board):
        board[i][j] = "X"  # Make the move
        move_val = minimax(board, 0, False)
        board[i][j] = " "  # Undo the move
        
        if move_val > best_val:
            best_move = (i, j)
            best_val = move_val
            
    return best_move

# Function to print the current board state
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Main function to run the game
def play_game():
    # Initial empty board
    board = [[" " for _ in range(3)] for _ in range(3)]
    
    # Player X (Maximizing player) goes first
    while True:
        print_board(board)
        
        # If it's X's turn, use minimax to find the best move
        if check_winner(board) is None:
            if not any(" " in row for row in board):  # If the board is full, it's a draw
                print("It's a draw!")
                break
            
            if sum(row.count("X") for row in board) == sum(row.count("O") for row in board):
                # X's turn (Maximizing)
                print("Player X's move:")
                move = find_best_move(board)
            else:
                # O's turn (Minimizing)
                print("Player O's move:")
                move = find_best_move(board)
                
            board[move[0]][move[1]] = "X" if sum(row.count("X") for row in board) == sum(row.count("O") for row in board) else "O"
            winner = check_winner(board)
            if winner:
                print_board(board)
                if winner == "X":
                    print("Player X wins!")
                elif winner == "O":
                    print("Player O wins!")
                else:
                    print("It's a draw!")
                break
        else:
            print("Game Over!")
            break

if __name__ == "__main__":
    play_game()

output :

  |   |  
-----
  |   |  
-----
  |   |  
-----
Player X's move:
X |   |  
-----
  |   |  
-----
  |   |  
-----
Player O's move:
X | O |  
-----
  |   |  
-----
  |   |  
-----
Player X's move:
X | O | X
-----
  |   |  
-----
  |   |  
-----
Player O's move:
X | O | X
-----
O |   |  
-----
  |   |  
-----
Player X's move:
X | O | X
-----
O | X |  
-----
  |   |  
-----
Player O's move:
X | O | X
-----
O | X |  
-----
O |   |  
-----
Player X's move:
X | O | X
-----
O | X |  
-----
O |   | X
-----
Player X wins!

=== Code Execution Successful ===
